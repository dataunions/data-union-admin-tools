{
  "contractName": "DataUnionSidechain",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EarningsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "JoinPartAgentAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "JoinPartAgentRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "MemberParted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earningsPerMember",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "activeMemberCount",
          "type": "uint256"
        }
      ],
      "name": "NewEarnings",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWei",
          "type": "uint256"
        }
      ],
      "name": "NewMemberEthSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RevenueReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferToAddressInContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferWithinContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UpdateNewMemberEth",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "activeMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataUnionMainnet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inactiveMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "joinPartAgentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "joinPartAgents",
      "outputs": [
        {
          "internalType": "enum DataUnionSidechain.ActiveStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lifetimeMemberEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "memberData",
      "outputs": [
        {
          "internalType": "enum DataUnionSidechain.ActiveStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "earningsBeforeLastJoin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lmeAtJoin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawnEarnings",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newMemberEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC677",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenMediator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEarningsWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "initialJoinPartAgents",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "tokenMediatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mainnetDataUnionAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "defaultNewMemberEth",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStats",
      "outputs": [
        {
          "internalType": "uint256[6]",
          "name": "",
          "type": "uint256[6]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "val",
          "type": "uint256"
        }
      ],
      "name": "setNewMemberEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "getEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "getWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "getWithdrawableEarnings",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWithdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "agents",
          "type": "address[]"
        }
      ],
      "name": "addJoinPartAgents",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "addJoinPartAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "agent",
          "type": "address"
        }
      ],
      "name": "removeJoinPartAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshRevenue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "partMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable[]",
          "name": "members",
          "type": "address[]"
        }
      ],
      "name": "addMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        }
      ],
      "name": "partMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferToMemberInContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferWithinContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "members",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "sendToMainnet",
          "type": "bool"
        }
      ],
      "name": "withdrawMembers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "sendToMainnet",
          "type": "bool"
        }
      ],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sendToMainnet",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "sendToMainnet",
          "type": "bool"
        }
      ],
      "name": "withdrawAllTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sendToMainnet",
          "type": "bool"
        }
      ],
      "name": "withdrawTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "signatureIsValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromSigner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "sendToMainnet",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "withdrawAllToSigned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromSigner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "sendToMainnet",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "withdrawToSigned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "toBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "b",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EarningsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"JoinPartAgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"JoinPartAgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberParted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earningsPerMember\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"activeMemberCount\",\"type\":\"uint256\"}],\"name\":\"NewEarnings\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWei\",\"type\":\"uint256\"}],\"name\":\"NewMemberEthSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RevenueReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferToAddressInContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferWithinContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdateNewMemberEth\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"addJoinPartAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"agents\",\"type\":\"address[]\"}],\"name\":\"addJoinPartAgents\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"members\",\"type\":\"address[]\"}],\"name\":\"addMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataUnionMainnet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStats\",\"outputs\":[{\"internalType\":\"uint256[6]\",\"name\":\"\",\"type\":\"uint256[6]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getWithdrawableEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inactiveMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"initialJoinPartAgents\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"tokenMediatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainnetDataUnionAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"defaultNewMemberEth\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"joinPartAgentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"joinPartAgents\",\"outputs\":[{\"internalType\":\"enum DataUnionSidechain.ActiveStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lifetimeMemberEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberData\",\"outputs\":[{\"internalType\":\"enum DataUnionSidechain.ActiveStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"earningsBeforeLastJoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lmeAtJoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnEarnings\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newMemberEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"partMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"}],\"name\":\"partMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"removeJoinPartAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setNewMemberEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"signatureIsValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"toBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC677\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMediator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarnings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarningsWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferToMemberInContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferWithinContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendToMainnet\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sendToMainnet\",\"type\":\"bool\"}],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sendToMainnet\",\"type\":\"bool\"}],\"name\":\"withdrawAllTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sendToMainnet\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdrawAllToSigned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"members\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"sendToMainnet\",\"type\":\"bool\"}],\"name\":\"withdrawMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendToMainnet\",\"type\":\"bool\"}],\"name\":\"withdrawTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromSigner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendToMainnet\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdrawToSigned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"claimOwnership()\":{\"details\":\"Allows the pendingOwner address to finalize the transfer.\"},\"signatureIsValid(address,address,uint256,bytes)\":{\"params\":{\"amount\":\"how much is authorized for withdraw, or zero for unlimited (withdrawAll)\",\"recipient\":\"of the tokens\",\"signature\":\"byte array from `web3.eth.accounts.sign`\",\"signer\":\"whose earnings are being withdrawn\"},\"returns\":{\"isValid\":\"true iff signer of the authorization (member whose earnings are going to be withdrawn) matches the signature\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to set the pendingOwner address.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}},\"transferWithinContract(address,uint256)\":{\"params\":{\"amount\":\"how much withdrawable earnings is transferred\",\"recipient\":\"whose withdrawable earnings will increase\"}},\"withdrawAllToSigned(address,address,bool,bytes)\":{\"params\":{\"fromSigner\":\"whose earnings are being withdrawn\",\"sendToMainnet\":\"if the tokens should be sent to mainnet or only withdrawn into sidechain address\",\"signature\":\"from the member, see `signatureIsValid` how signature generated for unlimited amount\",\"to\":\"the address the tokens will be sent to (instead of `msg.sender`)\"}},\"withdrawToSigned(address,address,uint256,bool,bytes)\":{\"params\":{\"amount\":\"of tokens to withdraw\",\"fromSigner\":\"whose earnings are being withdrawn\",\"sendToMainnet\":\"if the tokens should be sent to mainnet or only withdrawn into sidechain address\",\"signature\":\"from the member, see `signatureIsValid` how signature generated for unlimited amount\",\"to\":\"the address the tokens will be sent to (instead of `msg.sender`)\"}}}},\"userdoc\":{\"methods\":{\"getStats()\":{\"notice\":\"Atomic getter to get all state variables in one call This alleviates the fact that JSON RPC batch requests aren't available in ethers.js\"},\"refreshRevenue()\":{\"notice\":\"Process unaccounted tokens that have been sent previously Called by AMB (see DataUnionMainnet:sendTokensToBridge)\"},\"signatureIsValid(address,address,uint256,bytes)\":{\"notice\":\"Check signature from a member authorizing withdrawing its earnings to another account. Throws if the signature is badly formatted or doesn't match the given signer and amount. Signature has parts the act as replay protection: 1) `address(this)`: signature can't be used for other contracts; 2) `withdrawn[signer]`: signature only works once (for unspecified amount), and can be \\\"cancelled\\\" by sending a withdraw tx. Generated in Javascript with: `web3.eth.accounts.sign(recipientAddress + amount.toString(16, 64) + contractAddress.slice(2) + withdrawnTokens.toString(16, 64), signerPrivateKey)`, or for unlimited amount: `web3.eth.accounts.sign(recipientAddress + \\\"0\\\".repeat(64) + contractAddress.slice(2) + withdrawnTokens.toString(16, 64), signerPrivateKey)`.\"},\"transferToMemberInContract(address,uint256)\":{\"notice\":\"Transfer tokens from outside contract, add to a recipient's in-contract balance\"},\"transferWithinContract(address,uint256)\":{\"notice\":\"Transfer tokens from sender's in-contract balance to recipient's in-contract balance This is done by \\\"withdrawing\\\" sender's earnings and crediting them to recipient's unwithdrawn earnings,  so withdrawnEarnings never decreases for anyone (within this function)\"},\"withdrawAllToSigned(address,address,bool,bytes)\":{\"notice\":\"Do an \\\"unlimited donate withdraw\\\" on behalf of someone else, to an address they've specified. Sponsored withdraw is paid by admin, but target account could be whatever the member specifies. The signature gives a \\\"blank cheque\\\" for admin to withdraw all tokens to `recipient` in the future,  and it's valid until next withdraw (and so can be nullified by withdrawing any amount). A new signature needs to be obtained for each subsequent future withdraw.\"},\"withdrawToSigned(address,address,uint256,bool,bytes)\":{\"notice\":\"Do a \\\"donate withdraw\\\" on behalf of someone else, to an address they've specified. Sponsored withdraw is paid by admin, but target account could be whatever the member specifies. The signature is valid only for given amount of tokens that may be different from maximum withdrawable tokens.\"}}}},\"settings\":{\"compilationTarget\":{\"/home/heynow/streamr/data-union-solidity/contracts/DataUnionSidechain.sol\":\"DataUnionSidechain\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/heynow/streamr/data-union-solidity/contracts/DataUnionSidechain.sol\":{\"keccak256\":\"0x4642307a0866b24635ea7719ce499a371049ad8f0a87eb21c54cb829eb02b642\",\"urls\":[\"bzz-raw://2d5ea931bc6611d7fcce11f2d484aeef29e8e5a40e47e65aaa859dda6f4dacd1\",\"dweb:/ipfs/QmVwS7VYzQxuqwTwV3333ZmUztoq56CvuXZhLX2fbrB2Ai\"]},\"/home/heynow/streamr/data-union-solidity/contracts/IERC677.sol\":{\"keccak256\":\"0xe1eb10f511abe1922d4cac9b0c18b4119dc8096bcdfb0c53e2ad08d71ab193b4\",\"urls\":[\"bzz-raw://4b6846c8996809a49e275679d133ecff1b15aa2d8781bab9d6627b6c6bb4d1ed\",\"dweb:/ipfs/QmcYMawWrLWUVynAxEMK2dDCP6z4TbcAEyV7PYh8H3kuHh\"]},\"/home/heynow/streamr/data-union-solidity/contracts/Ownable.sol\":{\"keccak256\":\"0x0d96dac82f3bf17d2cdc90863a61c8957622c305bc3bbf9cd8f47facfa71dea1\",\"urls\":[\"bzz-raw://1cd621b81754be8073fc89bd2bc864e7b0169ba5f153edc5b9212a19f4890aa3\",\"dweb:/ipfs/QmcE5HTf3pptr2s7oiDqYtotCLrb736g8N7YyRZj8k5mHg\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"urls\":[\"bzz-raw://2df142592d1dc267d9549049ee3317fa190d2f87eaa565f86ab05ec83f7ab8f5\",\"dweb:/ipfs/QmSkJtcfWo7c42KnL5hho6GFxK6HRNV91XABx1P7xDtfLV\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"urls\":[\"bzz-raw://efdc632af6960cf865dbc113665ea1f5b90eab75cc40ec062b2f6ae6da582017\",\"dweb:/ipfs/QmfAZFDuG62vxmAN9DnXApv7e7PMzPqi4RkqqZHLMSQiY5\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b0319169055612989806100306000396000f3fe6080604052600436106102605760003560e01c806371cdfd6811610144578063bf1e42c0116100b6578063ce7b78641161007a578063ce7b786414610d5e578063e30c397814610e31578063e6018c3114610e46578063ead5d35914610e70578063f2fde38b14610eb1578063fc0c546a14610ee457610267565b8063bf1e42c014610c5d578063c44b73a314610c72578063c59d484714610cc9578063ca6d56dc14610d16578063cc77244014610d4957610267565b80638da5cb5b116101085780638da5cb5b146109d35780639107d08e14610a04578063a2d3cf4b14610a70578063a4d6ddc014610b41578063ae66d94814610bf1578063b274bcc714610c2457610267565b806371cdfd681461088157806373e2290c146108ba57806379049017146108fb5780637b30ed431461091057806385a21246146109be57610267565b8063392e53cd116101dd5780634e71e0c8116101a15780634e71e0c8146106b9578063593b79fe146106ce5780635fb6c6ed14610776578063662d45a21461078b5780636d8018b8146107be5780636f4d469b146107d357610267565b8063392e53cd146105f85780633d8e36a3146106215780633ebff90e146106365780634bee91371461064b5780634e40ea641461068657610267565b80631a79246c116102245780631a79246c146104885780632b94411f146105605780632df3eba41461059b5780632e0d4212146105b0578063331beb5f146105e357610267565b8063015c7f511461026c5780630600a8651461034d57806309a6400b14610374578063131b9c04146103a75780631796621a146103da57610267565b3661026757005b600080fd5b34801561027857600080fd5b5061034b600480360360c081101561028f57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156102c257600080fd5b8201836020820111156102d457600080fd5b803590602001918460208302840111600160201b831117156102f557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b0383358116945060208401351692604001359150610ef99050565b005b34801561035957600080fd5b50610362610fe6565b60408051918252519081900360200190f35b34801561038057600080fd5b5061034b6004803603602081101561039757600080fd5b50356001600160a01b0316611005565b3480156103b357600080fd5b50610362600480360360208110156103ca57600080fd5b50356001600160a01b0316611125565b3480156103e657600080fd5b5061034b600480360360208110156103fd57600080fd5b810190602081018135600160201b81111561041757600080fd5b82018360208201111561042957600080fd5b803590602001918460208302840111600160201b8311171561044a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506111d5945050505050565b34801561049457600080fd5b50610362600480360360a08110156104ab57600080fd5b6001600160a01b038235811692602081013590911691604082013591606081013515159181019060a081016080820135600160201b8111156104ec57600080fd5b8201836020820111156104fe57600080fd5b803590602001918460018302840111600160201b8311171561051f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611254945050505050565b34801561056c57600080fd5b506103626004803603604081101561058357600080fd5b506001600160a01b03813516906020013515156112be565b3480156105a757600080fd5b506103626112da565b3480156105bc57600080fd5b50610362600480360360208110156105d357600080fd5b50356001600160a01b03166112e0565b3480156105ef57600080fd5b50610362611309565b34801561060457600080fd5b5061060d61147e565b604080519115158252519081900360200190f35b34801561062d57600080fd5b5061036261148f565b34801561064257600080fd5b50610362611495565b34801561065757600080fd5b506103626004803603604081101561066e57600080fd5b506001600160a01b038135169060200135151561149b565b34801561069257600080fd5b5061034b600480360360208110156106a957600080fd5b50356001600160a01b03166114b0565b3480156106c557600080fd5b5061034b611619565b3480156106da57600080fd5b50610701600480360360208110156106f157600080fd5b50356001600160a01b03166116cf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561073b578181015183820152602001610723565b50505050905090810190601f1680156107685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561078257600080fd5b506103626116f3565b34801561079757600080fd5b5061034b600480360360208110156107ae57600080fd5b50356001600160a01b03166116f9565b3480156107ca57600080fd5b5061036261181d565b3480156107df57600080fd5b5061034b600480360360208110156107f657600080fd5b810190602081018135600160201b81111561081057600080fd5b82018360208201111561082257600080fd5b803590602001918460208302840111600160201b8311171561084357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611823945050505050565b34801561088d57600080fd5b5061034b600480360360408110156108a457600080fd5b506001600160a01b0381351690602001356118bf565b3480156108c657600080fd5b50610362600480360360608110156108dd57600080fd5b506001600160a01b0381351690602081013590604001351515611990565b34801561090757600080fd5b506103626119a6565b34801561091c57600080fd5b5061034b6004803603602081101561093357600080fd5b810190602081018135600160201b81111561094d57600080fd5b82018360208201111561095f57600080fd5b803590602001918460208302840111600160201b8311171561098057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506119ac945050505050565b3480156109ca57600080fd5b506103626119dc565b3480156109df57600080fd5b506109e86119e2565b604080516001600160a01b039092168252519081900360200190f35b348015610a1057600080fd5b50610a3760048036036020811015610a2757600080fd5b50356001600160a01b03166119f1565b60405180856002811115610a4757fe5b60ff16815260200184815260200183815260200182815260200194505050505060405180910390f35b348015610a7c57600080fd5b5061060d60048036036080811015610a9357600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b811115610acd57600080fd5b820183602082011115610adf57600080fd5b803590602001918460018302840111600160201b83111715610b0057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611a1c945050505050565b348015610b4d57600080fd5b5061036260048036036040811015610b6457600080fd5b810190602081018135600160201b811115610b7e57600080fd5b820183602082011115610b9057600080fd5b803590602001918460208302840111600160201b83111715610bb157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505050503515159050611c1d565b348015610bfd57600080fd5b5061036260048036036020811015610c1457600080fd5b50356001600160a01b0316611c6a565b348015610c3057600080fd5b5061034b60048036036040811015610c4757600080fd5b506001600160a01b038135169060200135611ce2565b348015610c6957600080fd5b506109e8611f58565b348015610c7e57600080fd5b50610ca560048036036020811015610c9557600080fd5b50356001600160a01b0316611f67565b60405180826002811115610cb557fe5b60ff16815260200191505060405180910390f35b348015610cd557600080fd5b50610cde611f7c565b604051808260c080838360005b83811015610d03578181015183820152602001610ceb565b5050505090500191505060405180910390f35b348015610d2257600080fd5b5061034b60048036036020811015610d3957600080fd5b50356001600160a01b0316611fc2565b348015610d5557600080fd5b506109e86121c8565b348015610d6a57600080fd5b5061036260048036036080811015610d8157600080fd5b6001600160a01b038235811692602081013590911691604082013515159190810190608081016060820135600160201b811115610dbd57600080fd5b820183602082011115610dcf57600080fd5b803590602001918460018302840111600160201b83111715610df057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506121d7945050505050565b348015610e3d57600080fd5b506109e8612249565b348015610e5257600080fd5b5061034b60048036036020811015610e6957600080fd5b5035612258565b348015610e7c57600080fd5b5061036260048036036060811015610e9357600080fd5b506001600160a01b03813516906020810135906040013515156122ee565b348015610ebd57600080fd5b5061034b60048036036020811015610ed457600080fd5b50356001600160a01b0316612363565b348015610ef057600080fd5b506109e86123d0565b610f0161147e565b15610f53576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f616c7265616479496e697469616c697a65640000000000000000604482015290519081900360640190fd5b60008054336001600160a01b031991821617909155600280549091166001600160a01b038716179055610f85846111d5565b600380546001600160a01b038086166001600160a01b0319928316179092556004805492851692909116919091179055610fbe81612258565b5050600080546001600160a01b0319166001600160a01b039590951694909417909355505050565b6000610fff6006546005546123df90919063ffffffff16565b90505b90565b6000546001600160a01b03163314611050576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60016001600160a01b0382166000908152600d602052604090205460ff16600281111561107957fe5b146110c2576040805162461bcd60e51b8152602060048201526014602482015273195c9c9bdc97db9bdd1058dd1a5d995059d95b9d60621b604482015290519081900360640190fd5b6001600160a01b0381166000818152600d6020526040808220805460ff19166002179055517feac6c7d5a1c157497119a5d4f661d5f23b844c415452ef440ed346bd127d885e9190a2600a5461111f90600163ffffffff6123df16565b600a5550565b6001600160a01b0381166000908152600c6020526040812081815460ff16600281111561114e57fe5b1415611193576040805162461bcd60e51b815260206004820152600f60248201526e32b93937b92fb737ba26b2b6b132b960891b604482015290519081900360640190fd5b6001815460ff1660028111156111a557fe5b146111b15760006111c8565b60028101546009546111c89163ffffffff6123df16565b6001909101540192915050565b6000546001600160a01b03163314611220576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60005b81518110156112505761124882828151811061123b57fe5b60200260200101516116f9565b600101611223565b5050565b600061126286868685611a1c565b6112a8576040805162461bcd60e51b81526020600482015260126024820152716572726f725f6261645369676e617475726560701b604482015290519081900360640190fd5b6112b486868686612421565b9695505050505050565b60006112d3836112cd336112e0565b84611990565b9392505050565b60055481565b60006113036112ee83611c6a565b6112f784611125565b9063ffffffff6123df16565b92915050565b600254604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d602081101561138357600080fd5b5051905060006113a1611394610fe6565b839063ffffffff6123df16565b90508015806113b05750600754155b156113c057600092505050611002565b60006113d76007548361273290919063ffffffff16565b6009549091506113ed908263ffffffff61277416565b600955600554611403908363ffffffff61277416565b6005556040805183815290517f41b06c6e0a1531dcb4b86d53ec6268666aa12d55775f8e5a63596fc935cdcc229181900360200190a160075460408051838152602081019290925280517f24a9873073eba764d17ef9fa7475b3b209c02e6e6f7ed991c9c80e09226a37a79281900390910190a15091505090565b6002546001600160a01b0316151590565b60085481565b600a5481565b60006112d3836114aa856112e0565b846122ee565b336001600160a01b03821614806114e457506001336000908152600d602052604090205460ff1660028111156114e257fe5b145b61152a576040805162461bcd60e51b8152602060048201526012602482015271195c9c9bdc97db9bdd14195c9b5a5d1d195960721b604482015290519081900360640190fd5b6001600160a01b0381166000908152600c602052604090206001815460ff16600281111561155457fe5b1461159e576040805162461bcd60e51b815260206004820152601560248201527432b93937b92fb737ba20b1ba34bb32a6b2b6b132b960591b604482015290519081900360640190fd5b6115a782611125565b600182810191909155815460ff191660021782556007546115c7916123df565b6007556008546115de90600163ffffffff61277416565b6008556040516001600160a01b038316907f7df2bff504799b36cafb9574b3fcfd8432ef4a1fa89d1ba9fe40324501adf5f590600090a25050565b6001546001600160a01b0316331461166b576040805162461bcd60e51b815260206004820152601060248201526f37b7363ca832b73234b733a7bbb732b960811b604482015290519081900360640190fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b604080516001600160a01b0392909216600560a21b18601483015260348201905290565b60075481565b6000546001600160a01b03163314611744576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60016001600160a01b0382166000908152600d602052604090205460ff16600281111561176d57fe5b14156117c0576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f616c72656164794163746976654167656e740000000000000000604482015290519081900360640190fd5b6001600160a01b0381166000818152600d6020526040808220805460ff19166001179055517f10581818fb1ffbfd9ac8500cba931a30c3a57b5e9b7972f2fa0aef002b3fde2b9190a2600a5461111f90600163ffffffff61277416565b60095481565b6001336000908152600d602052604090205460ff16600281111561184357fe5b1461188f576040805162461bcd60e51b8152602060048201526017602482015276195c9c9bdc97dbdb9b1e529bda5b94185c9d1059d95b9d604a1b604482015290519081900360640190fd5b60005b8151811015611250576118b78282815181106118aa57fe5b6020026020010151611fc2565b600101611892565b806118c9336112e0565b1015611918576040805162461bcd60e51b81526020600482015260196024820152786572726f725f696e73756666696369656e7442616c616e636560381b604482015290519081900360640190fd5b336000908152600c60205260409020600381015461193c908363ffffffff61277416565b600382015561194b83836127ce565b6040805183815290516001600160a01b0385169133917f638ce96e87261f007ef5c0389bb59b90db3e19c42edee859d6b09739d8d79f7f9181900360200190a3505050565b600061199e33858585612421565b949350505050565b600b5481565b60005b8151811015611250576119d48282815181106119c757fe5b60200260200101516114b0565b6001016119af565b60065481565b6000546001600160a01b031681565b600c60205260009081526040902080546001820154600283015460039093015460ff90921692909184565b60008151604114611a74576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f6261645369676e61747572654c656e6774680000000000000000604482015290519081900360640190fd5b60208201516040830151606084015160001a601b811015611a9357601b015b8060ff16601b1480611aa857508060ff16601c145b611af9576040805162461bcd60e51b815260206004820152601960248201527f6572726f725f6261645369676e617475726556657273696f6e00000000000000604482015290519081900360640190fd5b6000878730611b078c611c6a565b60405160200180807f19457468657265756d205369676e6564204d6573736167653a0a313034000000815250601d01856001600160a01b03166001600160a01b031660601b8152601401848152602001836001600160a01b03166001600160a01b031660601b8152601401828152602001945050505050604051602081830303815290604052805190602001209050600060018284878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611bf5573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038c81169116149650505050505050949350505050565b600080805b8451811015611c6257611c58611c4b868381518110611c3d57fe5b60200260200101518661149b565b839063ffffffff61277416565b9150600101611c22565b509392505050565b6001600160a01b0381166000908152600c6020526040812081815460ff166002811115611c9357fe5b1415611cd8576040805162461bcd60e51b815260206004820152600f60248201526e32b93937b92fb737ba26b2b6b132b960891b604482015290519081900360640190fd5b6003015492915050565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611d2d57600080fd5b505afa158015611d41573d6000803e3d6000fd5b505050506040513d6020811015611d5757600080fd5b5051600254604080516323b872dd60e01b81523360048201523060248201526044810186905290519293506001600160a01b03909116916323b872dd916064808201926020929091908290030181600087803b158015611db657600080fd5b505af1158015611dca573d6000803e3d6000fd5b505050506040513d6020811015611de057600080fd5b5051611e24576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e6f57600080fd5b505afa158015611e83573d6000803e3d6000fd5b505050506040513d6020811015611e9957600080fd5b5051905082611eae828463ffffffff6123df16565b1015611ef2576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b611efc84846127ce565b600554611f0f908463ffffffff61277416565b6005556040805184815290516001600160a01b0386169133917f4e018df3c92158645fcf45007db7029d3fa97d269866be2bd4360c5f5a6163e49181900360200190a350505050565b6004546001600160a01b031681565b600d6020526000908152604090205460ff1681565b611f84612935565b6040518060c0016040528060055481526020016006548152602001600754815260200160085481526020016009548152602001600a54815250905090565b6001336000908152600d602052604090205460ff166002811115611fe257fe5b1461202e576040805162461bcd60e51b8152602060048201526017602482015276195c9c9bdc97dbdb9b1e529bda5b94185c9d1059d95b9d604a1b604482015290519081900360640190fd5b6001600160a01b0381166000908152600c602052604090206001815460ff16600281111561205857fe5b14156120a1576040805162461bcd60e51b815260206004820152601360248201527232b93937b92fb0b63932b0b23ca6b2b6b132b960691b604482015290519081900360640190fd5b6002815460ff1660028111156120b357fe5b14156120d1576008546120cd90600163ffffffff6123df16565b6008555b600080825460ff1660028111156120e457fe5b1480156120f25750600b5415155b80156121005750600b544710155b825460ff19166001908117845560095460028501556007549192506121259190612774565b6007556040516001600160a01b038416907f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab90600090a280156121c357600b546040516001600160a01b0385169180156108fc02916000818181858888f19350505050156121c357600b5460408051918252517f55e2724f03f2711a94cf86d8b10c57130b103d6c2f1726076fbf9430340d41e79181900360200190a15b505050565b6003546001600160a01b031681565b60006121e68585600085611a1c565b61222c576040805162461bcd60e51b81526020600482015260126024820152716572726f725f6261645369676e617475726560701b604482015290519081900360640190fd5b612240858561223a886112e0565b86612421565b95945050505050565b6001546001600160a01b031681565b6000546001600160a01b031633146122a3576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600b548114156122b2576122eb565b600b8190556040805182815290517f749d0aa4ca45d6142166deb1820b64a888996311bb9f74a88c081f5b041d949c9181900360200190a15b50565b6000336001600160a01b038516148061231157506000546001600160a01b031633145b612357576040805162461bcd60e51b8152602060048201526012602482015271195c9c9bdc97db9bdd14195c9b5a5d1d195960721b604482015290519081900360640190fd5b61199e84858585612421565b6000546001600160a01b031633146123ae576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b60006112d383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612839565b6000826124305750600061199e565b612439856112e0565b831115612489576040805162461bcd60e51b81526020600482015260196024820152786572726f725f696e73756666696369656e7442616c616e636560381b604482015290519081900360640190fd5b6001600160a01b0385166000908152600c6020526040902060038101546124b6908563ffffffff61277416565b60038201556006546124ce908563ffffffff61277416565b6006558215612625576002546003546001600160a01b0391821691634000aea09116866124fa896116cf565b6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561256457818101518382015260200161254c565b50505050905090810190601f1680156125915780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156125b257600080fd5b505af11580156125c6573d6000803e3d6000fd5b505050506040513d60208110156125dc57600080fd5b5051612620576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b6126e9565b6002546040805163a9059cbb60e01b81526001600160a01b038881166004830152602482018890529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561267b57600080fd5b505af115801561268f573d6000803e3d6000fd5b505050506040513d60208110156126a557600080fd5b50516126e9576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b6040805185815290516001600160a01b038816917f48dc35af7b45e2a81fffad55f6e2fafacdb1d3d0d50d24ebdc16324f5ba757f1919081900360200190a25091949350505050565b60006112d383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506128d0565b6000828201838110156112d3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152600c6020526040902060018101546127fb908363ffffffff61277416565b60018201556000815460ff16600281111561281257fe5b14156121c357805460ff19166002178155600854612831906001612774565b600855505050565b600081848411156128c85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561288d578181015183820152602001612875565b50505050905090810190601f1680156128ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000818361291f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561288d578181015183820152602001612875565b50600083858161292b57fe5b0495945050505050565b6040518060c00160405280600690602082028036833750919291505056fea26469706673582212201bc1ebe49687dbeb26b9f260d089c5aa418b9a9ef5e8f22bf1ce619e57f6f06c64736f6c63430006060033",
  "deployedBytecode": "0x6080604052600436106102605760003560e01c806371cdfd6811610144578063bf1e42c0116100b6578063ce7b78641161007a578063ce7b786414610d5e578063e30c397814610e31578063e6018c3114610e46578063ead5d35914610e70578063f2fde38b14610eb1578063fc0c546a14610ee457610267565b8063bf1e42c014610c5d578063c44b73a314610c72578063c59d484714610cc9578063ca6d56dc14610d16578063cc77244014610d4957610267565b80638da5cb5b116101085780638da5cb5b146109d35780639107d08e14610a04578063a2d3cf4b14610a70578063a4d6ddc014610b41578063ae66d94814610bf1578063b274bcc714610c2457610267565b806371cdfd681461088157806373e2290c146108ba57806379049017146108fb5780637b30ed431461091057806385a21246146109be57610267565b8063392e53cd116101dd5780634e71e0c8116101a15780634e71e0c8146106b9578063593b79fe146106ce5780635fb6c6ed14610776578063662d45a21461078b5780636d8018b8146107be5780636f4d469b146107d357610267565b8063392e53cd146105f85780633d8e36a3146106215780633ebff90e146106365780634bee91371461064b5780634e40ea641461068657610267565b80631a79246c116102245780631a79246c146104885780632b94411f146105605780632df3eba41461059b5780632e0d4212146105b0578063331beb5f146105e357610267565b8063015c7f511461026c5780630600a8651461034d57806309a6400b14610374578063131b9c04146103a75780631796621a146103da57610267565b3661026757005b600080fd5b34801561027857600080fd5b5061034b600480360360c081101561028f57600080fd5b6001600160a01b038235811692602081013590911691810190606081016040820135600160201b8111156102c257600080fd5b8201836020820111156102d457600080fd5b803590602001918460208302840111600160201b831117156102f557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b0383358116945060208401351692604001359150610ef99050565b005b34801561035957600080fd5b50610362610fe6565b60408051918252519081900360200190f35b34801561038057600080fd5b5061034b6004803603602081101561039757600080fd5b50356001600160a01b0316611005565b3480156103b357600080fd5b50610362600480360360208110156103ca57600080fd5b50356001600160a01b0316611125565b3480156103e657600080fd5b5061034b600480360360208110156103fd57600080fd5b810190602081018135600160201b81111561041757600080fd5b82018360208201111561042957600080fd5b803590602001918460208302840111600160201b8311171561044a57600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506111d5945050505050565b34801561049457600080fd5b50610362600480360360a08110156104ab57600080fd5b6001600160a01b038235811692602081013590911691604082013591606081013515159181019060a081016080820135600160201b8111156104ec57600080fd5b8201836020820111156104fe57600080fd5b803590602001918460018302840111600160201b8311171561051f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611254945050505050565b34801561056c57600080fd5b506103626004803603604081101561058357600080fd5b506001600160a01b03813516906020013515156112be565b3480156105a757600080fd5b506103626112da565b3480156105bc57600080fd5b50610362600480360360208110156105d357600080fd5b50356001600160a01b03166112e0565b3480156105ef57600080fd5b50610362611309565b34801561060457600080fd5b5061060d61147e565b604080519115158252519081900360200190f35b34801561062d57600080fd5b5061036261148f565b34801561064257600080fd5b50610362611495565b34801561065757600080fd5b506103626004803603604081101561066e57600080fd5b506001600160a01b038135169060200135151561149b565b34801561069257600080fd5b5061034b600480360360208110156106a957600080fd5b50356001600160a01b03166114b0565b3480156106c557600080fd5b5061034b611619565b3480156106da57600080fd5b50610701600480360360208110156106f157600080fd5b50356001600160a01b03166116cf565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561073b578181015183820152602001610723565b50505050905090810190601f1680156107685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561078257600080fd5b506103626116f3565b34801561079757600080fd5b5061034b600480360360208110156107ae57600080fd5b50356001600160a01b03166116f9565b3480156107ca57600080fd5b5061036261181d565b3480156107df57600080fd5b5061034b600480360360208110156107f657600080fd5b810190602081018135600160201b81111561081057600080fd5b82018360208201111561082257600080fd5b803590602001918460208302840111600160201b8311171561084357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611823945050505050565b34801561088d57600080fd5b5061034b600480360360408110156108a457600080fd5b506001600160a01b0381351690602001356118bf565b3480156108c657600080fd5b50610362600480360360608110156108dd57600080fd5b506001600160a01b0381351690602081013590604001351515611990565b34801561090757600080fd5b506103626119a6565b34801561091c57600080fd5b5061034b6004803603602081101561093357600080fd5b810190602081018135600160201b81111561094d57600080fd5b82018360208201111561095f57600080fd5b803590602001918460208302840111600160201b8311171561098057600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506119ac945050505050565b3480156109ca57600080fd5b506103626119dc565b3480156109df57600080fd5b506109e86119e2565b604080516001600160a01b039092168252519081900360200190f35b348015610a1057600080fd5b50610a3760048036036020811015610a2757600080fd5b50356001600160a01b03166119f1565b60405180856002811115610a4757fe5b60ff16815260200184815260200183815260200182815260200194505050505060405180910390f35b348015610a7c57600080fd5b5061060d60048036036080811015610a9357600080fd5b6001600160a01b03823581169260208101359091169160408201359190810190608081016060820135600160201b811115610acd57600080fd5b820183602082011115610adf57600080fd5b803590602001918460018302840111600160201b83111715610b0057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611a1c945050505050565b348015610b4d57600080fd5b5061036260048036036040811015610b6457600080fd5b810190602081018135600160201b811115610b7e57600080fd5b820183602082011115610b9057600080fd5b803590602001918460208302840111600160201b83111715610bb157600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295505050503515159050611c1d565b348015610bfd57600080fd5b5061036260048036036020811015610c1457600080fd5b50356001600160a01b0316611c6a565b348015610c3057600080fd5b5061034b60048036036040811015610c4757600080fd5b506001600160a01b038135169060200135611ce2565b348015610c6957600080fd5b506109e8611f58565b348015610c7e57600080fd5b50610ca560048036036020811015610c9557600080fd5b50356001600160a01b0316611f67565b60405180826002811115610cb557fe5b60ff16815260200191505060405180910390f35b348015610cd557600080fd5b50610cde611f7c565b604051808260c080838360005b83811015610d03578181015183820152602001610ceb565b5050505090500191505060405180910390f35b348015610d2257600080fd5b5061034b60048036036020811015610d3957600080fd5b50356001600160a01b0316611fc2565b348015610d5557600080fd5b506109e86121c8565b348015610d6a57600080fd5b5061036260048036036080811015610d8157600080fd5b6001600160a01b038235811692602081013590911691604082013515159190810190608081016060820135600160201b811115610dbd57600080fd5b820183602082011115610dcf57600080fd5b803590602001918460018302840111600160201b83111715610df057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506121d7945050505050565b348015610e3d57600080fd5b506109e8612249565b348015610e5257600080fd5b5061034b60048036036020811015610e6957600080fd5b5035612258565b348015610e7c57600080fd5b5061036260048036036060811015610e9357600080fd5b506001600160a01b03813516906020810135906040013515156122ee565b348015610ebd57600080fd5b5061034b60048036036020811015610ed457600080fd5b50356001600160a01b0316612363565b348015610ef057600080fd5b506109e86123d0565b610f0161147e565b15610f53576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f616c7265616479496e697469616c697a65640000000000000000604482015290519081900360640190fd5b60008054336001600160a01b031991821617909155600280549091166001600160a01b038716179055610f85846111d5565b600380546001600160a01b038086166001600160a01b0319928316179092556004805492851692909116919091179055610fbe81612258565b5050600080546001600160a01b0319166001600160a01b039590951694909417909355505050565b6000610fff6006546005546123df90919063ffffffff16565b90505b90565b6000546001600160a01b03163314611050576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60016001600160a01b0382166000908152600d602052604090205460ff16600281111561107957fe5b146110c2576040805162461bcd60e51b8152602060048201526014602482015273195c9c9bdc97db9bdd1058dd1a5d995059d95b9d60621b604482015290519081900360640190fd5b6001600160a01b0381166000818152600d6020526040808220805460ff19166002179055517feac6c7d5a1c157497119a5d4f661d5f23b844c415452ef440ed346bd127d885e9190a2600a5461111f90600163ffffffff6123df16565b600a5550565b6001600160a01b0381166000908152600c6020526040812081815460ff16600281111561114e57fe5b1415611193576040805162461bcd60e51b815260206004820152600f60248201526e32b93937b92fb737ba26b2b6b132b960891b604482015290519081900360640190fd5b6001815460ff1660028111156111a557fe5b146111b15760006111c8565b60028101546009546111c89163ffffffff6123df16565b6001909101540192915050565b6000546001600160a01b03163314611220576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60005b81518110156112505761124882828151811061123b57fe5b60200260200101516116f9565b600101611223565b5050565b600061126286868685611a1c565b6112a8576040805162461bcd60e51b81526020600482015260126024820152716572726f725f6261645369676e617475726560701b604482015290519081900360640190fd5b6112b486868686612421565b9695505050505050565b60006112d3836112cd336112e0565b84611990565b9392505050565b60055481565b60006113036112ee83611c6a565b6112f784611125565b9063ffffffff6123df16565b92915050565b600254604080516370a0823160e01b8152306004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561135957600080fd5b505afa15801561136d573d6000803e3d6000fd5b505050506040513d602081101561138357600080fd5b5051905060006113a1611394610fe6565b839063ffffffff6123df16565b90508015806113b05750600754155b156113c057600092505050611002565b60006113d76007548361273290919063ffffffff16565b6009549091506113ed908263ffffffff61277416565b600955600554611403908363ffffffff61277416565b6005556040805183815290517f41b06c6e0a1531dcb4b86d53ec6268666aa12d55775f8e5a63596fc935cdcc229181900360200190a160075460408051838152602081019290925280517f24a9873073eba764d17ef9fa7475b3b209c02e6e6f7ed991c9c80e09226a37a79281900390910190a15091505090565b6002546001600160a01b0316151590565b60085481565b600a5481565b60006112d3836114aa856112e0565b846122ee565b336001600160a01b03821614806114e457506001336000908152600d602052604090205460ff1660028111156114e257fe5b145b61152a576040805162461bcd60e51b8152602060048201526012602482015271195c9c9bdc97db9bdd14195c9b5a5d1d195960721b604482015290519081900360640190fd5b6001600160a01b0381166000908152600c602052604090206001815460ff16600281111561155457fe5b1461159e576040805162461bcd60e51b815260206004820152601560248201527432b93937b92fb737ba20b1ba34bb32a6b2b6b132b960591b604482015290519081900360640190fd5b6115a782611125565b600182810191909155815460ff191660021782556007546115c7916123df565b6007556008546115de90600163ffffffff61277416565b6008556040516001600160a01b038316907f7df2bff504799b36cafb9574b3fcfd8432ef4a1fa89d1ba9fe40324501adf5f590600090a25050565b6001546001600160a01b0316331461166b576040805162461bcd60e51b815260206004820152601060248201526f37b7363ca832b73234b733a7bbb732b960811b604482015290519081900360640190fd5b600154600080546040516001600160a01b0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b604080516001600160a01b0392909216600560a21b18601483015260348201905290565b60075481565b6000546001600160a01b03163314611744576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b60016001600160a01b0382166000908152600d602052604090205460ff16600281111561176d57fe5b14156117c0576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f616c72656164794163746976654167656e740000000000000000604482015290519081900360640190fd5b6001600160a01b0381166000818152600d6020526040808220805460ff19166001179055517f10581818fb1ffbfd9ac8500cba931a30c3a57b5e9b7972f2fa0aef002b3fde2b9190a2600a5461111f90600163ffffffff61277416565b60095481565b6001336000908152600d602052604090205460ff16600281111561184357fe5b1461188f576040805162461bcd60e51b8152602060048201526017602482015276195c9c9bdc97dbdb9b1e529bda5b94185c9d1059d95b9d604a1b604482015290519081900360640190fd5b60005b8151811015611250576118b78282815181106118aa57fe5b6020026020010151611fc2565b600101611892565b806118c9336112e0565b1015611918576040805162461bcd60e51b81526020600482015260196024820152786572726f725f696e73756666696369656e7442616c616e636560381b604482015290519081900360640190fd5b336000908152600c60205260409020600381015461193c908363ffffffff61277416565b600382015561194b83836127ce565b6040805183815290516001600160a01b0385169133917f638ce96e87261f007ef5c0389bb59b90db3e19c42edee859d6b09739d8d79f7f9181900360200190a3505050565b600061199e33858585612421565b949350505050565b600b5481565b60005b8151811015611250576119d48282815181106119c757fe5b60200260200101516114b0565b6001016119af565b60065481565b6000546001600160a01b031681565b600c60205260009081526040902080546001820154600283015460039093015460ff90921692909184565b60008151604114611a74576040805162461bcd60e51b815260206004820152601860248201527f6572726f725f6261645369676e61747572654c656e6774680000000000000000604482015290519081900360640190fd5b60208201516040830151606084015160001a601b811015611a9357601b015b8060ff16601b1480611aa857508060ff16601c145b611af9576040805162461bcd60e51b815260206004820152601960248201527f6572726f725f6261645369676e617475726556657273696f6e00000000000000604482015290519081900360640190fd5b6000878730611b078c611c6a565b60405160200180807f19457468657265756d205369676e6564204d6573736167653a0a313034000000815250601d01856001600160a01b03166001600160a01b031660601b8152601401848152602001836001600160a01b03166001600160a01b031660601b8152601401828152602001945050505050604051602081830303815290604052805190602001209050600060018284878760405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611bf5573d6000803e3d6000fd5b5050604051601f1901516001600160a01b038c81169116149650505050505050949350505050565b600080805b8451811015611c6257611c58611c4b868381518110611c3d57fe5b60200260200101518661149b565b839063ffffffff61277416565b9150600101611c22565b509392505050565b6001600160a01b0381166000908152600c6020526040812081815460ff166002811115611c9357fe5b1415611cd8576040805162461bcd60e51b815260206004820152600f60248201526e32b93937b92fb737ba26b2b6b132b960891b604482015290519081900360640190fd5b6003015492915050565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611d2d57600080fd5b505afa158015611d41573d6000803e3d6000fd5b505050506040513d6020811015611d5757600080fd5b5051600254604080516323b872dd60e01b81523360048201523060248201526044810186905290519293506001600160a01b03909116916323b872dd916064808201926020929091908290030181600087803b158015611db657600080fd5b505af1158015611dca573d6000803e3d6000fd5b505050506040513d6020811015611de057600080fd5b5051611e24576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611e6f57600080fd5b505afa158015611e83573d6000803e3d6000fd5b505050506040513d6020811015611e9957600080fd5b5051905082611eae828463ffffffff6123df16565b1015611ef2576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b611efc84846127ce565b600554611f0f908463ffffffff61277416565b6005556040805184815290516001600160a01b0386169133917f4e018df3c92158645fcf45007db7029d3fa97d269866be2bd4360c5f5a6163e49181900360200190a350505050565b6004546001600160a01b031681565b600d6020526000908152604090205460ff1681565b611f84612935565b6040518060c0016040528060055481526020016006548152602001600754815260200160085481526020016009548152602001600a54815250905090565b6001336000908152600d602052604090205460ff166002811115611fe257fe5b1461202e576040805162461bcd60e51b8152602060048201526017602482015276195c9c9bdc97dbdb9b1e529bda5b94185c9d1059d95b9d604a1b604482015290519081900360640190fd5b6001600160a01b0381166000908152600c602052604090206001815460ff16600281111561205857fe5b14156120a1576040805162461bcd60e51b815260206004820152601360248201527232b93937b92fb0b63932b0b23ca6b2b6b132b960691b604482015290519081900360640190fd5b6002815460ff1660028111156120b357fe5b14156120d1576008546120cd90600163ffffffff6123df16565b6008555b600080825460ff1660028111156120e457fe5b1480156120f25750600b5415155b80156121005750600b544710155b825460ff19166001908117845560095460028501556007549192506121259190612774565b6007556040516001600160a01b038416907f0abf3b3f643594d958297062a019458e27d7766629590ac621aa1000fa1298ab90600090a280156121c357600b546040516001600160a01b0385169180156108fc02916000818181858888f19350505050156121c357600b5460408051918252517f55e2724f03f2711a94cf86d8b10c57130b103d6c2f1726076fbf9430340d41e79181900360200190a15b505050565b6003546001600160a01b031681565b60006121e68585600085611a1c565b61222c576040805162461bcd60e51b81526020600482015260126024820152716572726f725f6261645369676e617475726560701b604482015290519081900360640190fd5b612240858561223a886112e0565b86612421565b95945050505050565b6001546001600160a01b031681565b6000546001600160a01b031633146122a3576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600b548114156122b2576122eb565b600b8190556040805182815290517f749d0aa4ca45d6142166deb1820b64a888996311bb9f74a88c081f5b041d949c9181900360200190a15b50565b6000336001600160a01b038516148061231157506000546001600160a01b031633145b612357576040805162461bcd60e51b8152602060048201526012602482015271195c9c9bdc97db9bdd14195c9b5a5d1d195960721b604482015290519081900360640190fd5b61199e84858585612421565b6000546001600160a01b031633146123ae576040805162461bcd60e51b815260206004820152600960248201526837b7363ca7bbb732b960b91b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b60006112d383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612839565b6000826124305750600061199e565b612439856112e0565b831115612489576040805162461bcd60e51b81526020600482015260196024820152786572726f725f696e73756666696369656e7442616c616e636560381b604482015290519081900360640190fd5b6001600160a01b0385166000908152600c6020526040902060038101546124b6908563ffffffff61277416565b60038201556006546124ce908563ffffffff61277416565b6006558215612625576002546003546001600160a01b0391821691634000aea09116866124fa896116cf565b6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561256457818101518382015260200161254c565b50505050905090810190601f1680156125915780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156125b257600080fd5b505af11580156125c6573d6000803e3d6000fd5b505050506040513d60208110156125dc57600080fd5b5051612620576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b6126e9565b6002546040805163a9059cbb60e01b81526001600160a01b038881166004830152602482018890529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561267b57600080fd5b505af115801561268f573d6000803e3d6000fd5b505050506040513d60208110156126a557600080fd5b50516126e9576040805162461bcd60e51b815260206004820152600e60248201526d32b93937b92fba3930b739b332b960911b604482015290519081900360640190fd5b6040805185815290516001600160a01b038816917f48dc35af7b45e2a81fffad55f6e2fafacdb1d3d0d50d24ebdc16324f5ba757f1919081900360200190a25091949350505050565b60006112d383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506128d0565b6000828201838110156112d3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6001600160a01b0382166000908152600c6020526040902060018101546127fb908363ffffffff61277416565b60018201556000815460ff16600281111561281257fe5b14156121c357805460ff19166002178155600854612831906001612774565b600855505050565b600081848411156128c85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561288d578181015183820152602001612875565b50505050905090810190601f1680156128ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000818361291f5760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561288d578181015183820152602001612875565b50600083858161292b57fe5b0495945050505050565b6040518060c00160405280600690602082028036833750919291505056fea26469706673582212201bc1ebe49687dbeb26b9f260d089c5aa418b9a9ef5e8f22bf1ce619e57f6f06c64736f6c63430006060033",
  "immutableReferences": {},
  "sourceMap": "271:16899:4:-:0;;;2096:43;5:9:-1;2:2;;;27:1;24;17:12;2:2;-1:-1;2133:1:4;577:14:12;;-1:-1:-1;;;;;;577:14:12;;;271:16899:4;;;;;;",
  "deployedSourceMap": "271:16899:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12:1:-1;9;2:12;2180:713:4;;5:9:-1;2:2;;;27:1;24;17:12;2:2;2180:713:4;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;;;;;2180:713:4;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11:28;;8:2;;;52:1;49;42:12;8:2;2180:713:4;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;2180:713:4;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;-1:-1;;;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;2180:713:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;2180:713:4;;-1:-1:-1;;;;;;;2180:713:4;;;;;-1:-1:-1;2180:713:4;;;;;;;;;;-1:-1:-1;2180:713:4;;-1:-1:-1;2180:713:4:i;:::-;;4469:124;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4469:124:4;;;:::i;:::-;;;;;;;;;;;;;;;;5097:308;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5097:308:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;5097:308:4;-1:-1:-1;;;;;5097:308:4;;:::i;3641:424::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;3641:424:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;3641:424:4;-1:-1:-1;;;;;3641:424:4;;:::i;4599:181::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4599:181:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;4599:181:4;;;;;;;;-1:-1:-1;;;11:28;;8:2;;;52:1;49;42:12;8:2;4599:181:4;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;4599:181:4;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;-1:-1;;;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;4599:181:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;4599:181:4;;-1:-1:-1;4599:181:4;;-1:-1:-1;;;;;4599:181:4:i;15415:377::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;15415:377:4;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;;;;;15415:377:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11:28;;8:2;;;52:1;49;42:12;8:2;15415:377:4;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;15415:377:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;15415:377:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;15415:377:4;;-1:-1:-1;15415:377:4;;-1:-1:-1;;;;;15415:377:4:i;10807:190::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;10807:190:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;10807:190:4;;;;;;;;;;:::i;1518:28::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1518:28:4;;;:::i;4315:148::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4315:148:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;4315:148:4;-1:-1:-1;;;;;4315:148:4;;:::i;5555:593::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;5555:593:4;;;:::i;2899:103::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;2899:103:4;;;:::i;:::-;;;;;;;;;;;;;;;;;;1634:34;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1634:34:4;;;:::i;1718:33::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1718:33:4;;;:::i;10337:190::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;10337:190:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;10337:190:4;;;;;;;;;;:::i;6993:547::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6993:547:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;6993:547:4;-1:-1:-1;;;;;6993:547:4;;:::i;1123:226:12:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1123:226:12;;;:::i;15798:389:4:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;15798:389:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;15798:389:4;-1:-1:-1;;;;;15798:389:4;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;15798:389:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1596:32;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1596:32:4;;;:::i;4786:305::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4786:305:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;4786:305:4;-1:-1:-1;;;;;4786:305:4;;:::i;1674:37::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1674:37:4;;;:::i;7546:186::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7546:186:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;7546:186:4;;;;;;;;-1:-1:-1;;;11:28;;8:2;;;52:1;49;42:12;8:2;7546:186:4;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;7546:186:4;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;-1:-1;;;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;7546:186:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7546:186:4;;-1:-1:-1;7546:186:4;;-1:-1:-1;;;;;7546:186:4:i;9012:470::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;9012:470:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;9012:470:4;;;;;;;;:::i;11003:182::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;11003:182:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;11003:182:4;;;;;;;;;;;;;;;:::i;1758:27::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1758:27:4;;;:::i;7773:162::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;7773:162:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;7773:162:4;;;;;;;;-1:-1:-1;;;11:28;;8:2;;;52:1;49;42:12;8:2;7773:162:4;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;7773:162:4;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;-1:-1;;;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;7773:162:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;7773:162:4;;-1:-1:-1;7773:162:4;;-1:-1:-1;;;;;7773:162:4:i;1552:37::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1552:37:4;;;:::i;236:20:12:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;236:20:12;;;:::i;:::-;;;;-1:-1:-1;;;;;236:20:12;;;;;;;;;;;;;;1792:48:4;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1792:48:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1792:48:4;-1:-1:-1;;;;;1792:48:4;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12403:1022;;5:9:-1;2:2;;;27:1;24;17:12;2:2;12403:1022:4;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;;;;;12403:1022:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11:28;;8:2;;;52:1;49;42:12;8:2;12403:1022:4;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;12403:1022:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;12403:1022:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;12403:1022:4;;-1:-1:-1;12403:1022:4;;-1:-1:-1;;;;;12403:1022:4:i;10007:324::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;10007:324:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;10007:324:4;;;;;;;;-1:-1:-1;;;11:28;;8:2;;;52:1;49;42:12;8:2;10007:324:4;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;10007:324:4;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;-1:-1;;;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;10007:324:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;10007:324:4;;-1:-1:-1;;;;10007:324:4;;;;-1:-1:-1;10007:324:4;:::i;4071:238::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;4071:238:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;4071:238:4;-1:-1:-1;;;;;4071:238:4;;:::i;8044:530::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;8044:530:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;8044:530:4;;;;;;;;:::i;1480:31::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1480:31:4;;;:::i;1846:54::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1846:54:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;1846:54:4;-1:-1:-1;;;;;1846:54:4;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3175:289;;5:9:-1;2:2;;;27:1;24;17:12;2:2;3175:289:4;;;:::i;:::-;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3175:289:4;;;;;;;;;;;;;;;;6154:833;;5:9:-1;2:2;;;27:1;24;17:12;2:2;6154:833:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;6154:833:4;-1:-1:-1;;;;;6154:833:4;;:::i;1446:28::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1446:28:4;;;:::i;14296:383::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;14296:383:4;;;;;;15:3:-1;10;7:12;4:2;;;32:1;29;22:12;4:2;-1:-1;;;;;14296:383:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11:28;;8:2;;;52:1;49;42:12;8:2;14296:383:4;;41:9:-1;34:4;18:14;14:25;11:40;8:2;;;64:1;61;54:12;8:2;14296:383:4;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;-1:-1;;;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;14296:383:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;74:27;;;;-1:-1;14296:383:4;;-1:-1:-1;14296:383:4;;-1:-1:-1;;;;;14296:383:4:i;262:27:12:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;262:27:12;;;:::i;3470:165:4:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;3470:165:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;3470:165:4;;:::i;10533:268::-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;10533:268:4;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;;;;;;10533:268:4;;;;;;;;;;;;;;;:::i;929:102:12:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;929:102:12;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;929:102:12;-1:-1:-1;;;;;929:102:12;;:::i;1420:20:4:-;;5:9:-1;2:2;;;27:1;24;17:12;2:2;1420:20:4;;;:::i;2180:713::-;2456:15;:13;:15::i;:::-;2455:16;2447:53;;;;;-1:-1:-1;;;2447:53:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;2510:5;:18;;2518:10;-1:-1:-1;;;;;;2510:18:4;;;;;;;2633:5;:29;;;;;-1:-1:-1;;;;;2633:29:4;;;;;2672:40;2690:21;2672:17;:40::i;:::-;2722:13;:36;;-1:-1:-1;;;;;2722:36:4;;;-1:-1:-1;;;;;;2722:36:4;;;;;;;2768:16;:42;;;;;;;;;;;;;;;2820:36;2836:19;2820:15;:36::i;:::-;-1:-1:-1;;2866:5:4;:20;;-1:-1:-1;;;;;;2866:20:4;-1:-1:-1;;;;;2866:20:4;;;;;;;;;;;-1:-1:-1;;;2180:713:4:o;4469:124::-;4519:7;4545:41;4563:22;;4545:13;;:17;;:41;;;;:::i;:::-;4538:48;;4469:124;;:::o;5097:308::-;739:5:12;;-1:-1:-1;;;;;739:5:12;725:10;:19;717:41;;;;;-1:-1:-1;;;717:41:12;;;;;;;;;;;;-1:-1:-1;;;717:41:12;;;;;;;;;;;;;;;5201:19:4::1;-1:-1:-1::0;;;;;5176:21:4;::::1;;::::0;;;:14:::1;:21;::::0;;;;;::::1;;:44;::::0;::::1;;;;;;;5168:77;;;::::0;;-1:-1:-1;;;5168:77:4;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;5168:77:4;;;;;;;;;;;;;::::1;;-1:-1:-1::0;;;;;5255:21:4;::::1;;::::0;;;:14:::1;:21;::::0;;;;;:45;;-1:-1:-1;;5255:45:4::1;5279:21;5255:45;::::0;;5315:27;::::1;::::0;5255:21;5315:27:::1;5373:18;::::0;:25:::1;::::0;5396:1:::1;5373:25;:22;:25;:::i;:::-;5352:18;:46:::0;-1:-1:-1;5097:308:4:o;3641:424::-;-1:-1:-1;;;;;3744:18:4;;3699:7;3744:18;;;:10;:18;;;;;3699:7;3780:11;;;;:32;;;;;;;;;;3772:60;;;;;-1:-1:-1;;;3772:60:4;;;;;;;;;;;;-1:-1:-1;;;3772:60:4;;;;;;;;;;;;;;;3936:19;3921:11;;;;:34;;;;;;;;;:123;;4043:1;3921:123;;;4005:14;;;;3978:22;;:42;;;:26;:42;:::i;:::-;3861:27;;;;;:197;;3641:424;-1:-1:-1;;3641:424:4:o;4599:181::-;739:5:12;;-1:-1:-1;;;;;739:5:12;725:10;:19;717:41;;;;;-1:-1:-1;;;717:41:12;;;;;;;;;;;;-1:-1:-1;;;717:41:12;;;;;;;;;;;;;;;4683:9:4::1;4678:96;4702:6;:13;4698:1;:17;4678:96;;;4736:27;4753:6;4760:1;4753:9;;;;;;;;;;;;;;4736:16;:27::i;:::-;4717:3;;4678:96;;;;4599:181:::0;:::o;15415:377::-;15608:14;15646:51;15663:10;15675:2;15679:6;15687:9;15646:16;:51::i;:::-;15638:82;;;;;-1:-1:-1;;;15638:82:4;;;;;;;;;;;;-1:-1:-1;;;15638:82:4;;;;;;;;;;;;;;;15737:48;15747:10;15759:2;15763:6;15771:13;15737:9;:48::i;:::-;15730:55;15415:377;-1:-1:-1;;;;;;15415:377:4:o;10807:190::-;10894:7;10924:66;10935:2;10939:35;10963:10;10939:23;:35::i;:::-;10976:13;10924:10;:66::i;:::-;10917:73;10807:190;-1:-1:-1;;;10807:190:4:o;1518:28::-;;;;:::o;4315:148::-;4385:7;4411:45;4435:20;4448:6;4435:12;:20::i;:::-;4411:19;4423:6;4411:11;:19::i;:::-;:23;:45;:23;:45;:::i;:::-;4404:52;4315:148;-1:-1:-1;;4315:148:4:o;5555:593::-;5634:5;;:30;;;-1:-1:-1;;;5634:30:4;;5658:4;5634:30;;;;;;5597:7;;;;-1:-1:-1;;;;;5634:5:4;;;;:15;;:30;;;;;;;;;;;;;;;:5;:30;;;2:2:-1;;;;27:1;24;17:12;2:2;5634:30:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5634:30:4;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;5634:30:4;;-1:-1:-1;5674:15:4;5692:32;5704:19;:17;:19::i;:::-;5692:7;;:32;:11;:32;:::i;:::-;5674:50;-1:-1:-1;5766:12:4;;;:38;;-1:-1:-1;5782:17:4;;:22;5766:38;5762:52;;;5813:1;5806:8;;;;;;5762:52;5824:25;5852:30;5864:17;;5852:7;:11;;:30;;;;:::i;:::-;5917:22;;5824:58;;-1:-1:-1;5917:45:4;;5824:58;5917:45;:26;:45;:::i;:::-;5892:22;:70;5988:13;;:26;;6006:7;5988:26;:17;:26;:::i;:::-;5972:13;:42;6029:24;;;;;;;;;;;;;;;;;6099:17;;6068:49;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6134:7:4;-1:-1:-1;;5555:593:4;:::o;2899:103::-;2975:5;;-1:-1:-1;;;;;2975:5:4;2967:28;;2899:103;:::o;1634:34::-;;;;:::o;1718:33::-;;;;:::o;10337:190::-;10426:7;10456:64;10465:6;10473:31;10497:6;10473:23;:31::i;:::-;10506:13;10456:8;:64::i;6993:547::-;7054:10;-1:-1:-1;;;;;7054:20:4;;;;:73;;-1:-1:-1;7108:19:4;7093:10;7078:26;;;;:14;:26;;;;;;;;:49;;;;;;;;;7054:73;7046:104;;;;;-1:-1:-1;;;7046:104:4;;;;;;;;;;;;-1:-1:-1;;;7046:104:4;;;;;;;;;;;;;;;-1:-1:-1;;;;;7186:18:4;;7160:23;7186:18;;;:10;:18;;;;;7237:19;7222:11;;;;:34;;;;;;;;;7214:68;;;;;-1:-1:-1;;;7214:68:4;;;;;;;;;;;;-1:-1:-1;;;7214:68:4;;;;;;;;;;;;;;;7322:19;7334:6;7322:11;:19::i;:::-;7292:27;;;;:49;;;;7351:35;;-1:-1:-1;;7351:35:4;7365:21;7351:35;;;7416:17;;:24;;:21;:24::i;:::-;7396:17;:44;7472:19;;:26;;7496:1;7472:26;:23;:26;:::i;:::-;7450:19;:48;7513:20;;-1:-1:-1;;;;;7513:20:4;;;;;;;;6993:547;;:::o;1123:226:12:-;1188:12;;-1:-1:-1;;;;;1188:12:12;1174:10;:26;1166:55;;;;;-1:-1:-1;;;1166:55:12;;;;;;;;;;;;-1:-1:-1;;;1166:55:12;;;;;;;;;;;;;;;1264:12;;;1257:5;;1236:41;;-1:-1:-1;;;;;1264:12:12;;;;1257:5;;;;1236:41;;;1295:12;;;;1287:20;;-1:-1:-1;;;;;;1287:20:12;;;-1:-1:-1;;;;;1295:12:12;;1287:20;;;;1317:25;;;1123:226::o;15798:389:4:-;15911:4;15905:11;;-1:-1:-1;;;;;15934:50:4;;;;-1:-1:-1;;;16049:52:4;16028:2;16021:10;;15997:118;16148:2;16141:10;;16128:24;;15905:11;15882:299::o;1596:32::-;;;;:::o;4786:305::-;739:5:12;;-1:-1:-1;;;;;739:5:12;725:10;:19;717:41;;;;;-1:-1:-1;;;717:41:12;;;;;;;;;;;;-1:-1:-1;;;717:41:12;;;;;;;;;;;;;;;4887:19:4::1;-1:-1:-1::0;;;;;4862:21:4;::::1;;::::0;;;:14:::1;:21;::::0;;;;;::::1;;:44;::::0;::::1;;;;;;;;4854:81;;;::::0;;-1:-1:-1;;;4854:81:4;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;::::1;::::0;;;;;;;;;;;;;::::1;;-1:-1:-1::0;;;;;4945:21:4;::::1;;::::0;;;:14:::1;:21;::::0;;;;;:43;;-1:-1:-1;;4945:43:4::1;4969:19;4945:43;::::0;;5003:25;::::1;::::0;4945:21;5003:25:::1;5059:18;::::0;:25:::1;::::0;5082:1:::1;5059:25;:22;:25;:::i;1674:37::-:0;;;;:::o;7546:186::-;1984:19;1969:10;1954:26;;;;:14;:26;;;;;;;;:49;;;;;;;;;1946:85;;;;;-1:-1:-1;;;1946:85:4;;;;;;;;;;;;-1:-1:-1;;;1946:85:4;;;;;;;;;;;;;;;7640:9:::1;7635:91;7659:7;:14;7655:1;:18;7635:91;;;7694:21;7704:7;7712:1;7704:10;;;;;;;;;;;;;;7694:9;:21::i;:::-;7675:3;;7635:91;;9012:470:::0;9140:6;9101:35;9125:10;9101:23;:35::i;:::-;:45;;9093:83;;;;;-1:-1:-1;;;9093:83:4;;;;;;;;;;;;-1:-1:-1;;;9093:83:4;;;;;;;;;;;;;;;9282:10;9245:23;9271:22;;;:10;:22;;;;;9328;;;;:34;;9355:6;9328:34;:26;:34;:::i;:::-;9303:22;;;:59;9372:35;9389:9;9400:6;9372:16;:35::i;:::-;9422:53;;;;;;;;-1:-1:-1;;;;;9422:53:4;;;9445:10;;9422:53;;;;;;;;;9012:470;;;:::o;11003:182::-;11100:7;11130:48;11140:10;11152:2;11156:6;11164:13;11130:9;:48::i;:::-;11123:55;11003:182;-1:-1:-1;;;;11003:182:4:o;1758:27::-;;;;:::o;7773:162::-;7842:9;7837:92;7861:7;:14;7857:1;:18;7837:92;;;7896:22;7907:7;7915:1;7907:10;;;;;;;;;;;;;;7896;:22::i;:::-;7877:3;;7837:92;;1552:37;;;;:::o;236:20:12:-;;;-1:-1:-1;;;;;236:20:12;;:::o;1792:48:4:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;12403:1022::-;12576:12;12612:9;:16;12632:2;12612:22;12604:59;;;;;-1:-1:-1;;;12604:59:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;12818:2;12803:18;;12797:25;12861:2;12846:18;;12840:25;12912:2;12897:18;;12891:25;12674:9;12883:34;12944:2;12940:6;;12936:44;;;12967:2;12962:7;12936:44;12997:1;:7;;13002:2;12997:7;:18;;;;13008:1;:7;;13013:2;13008:7;12997:18;12989:56;;;;;-1:-1:-1;;;12989:56:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;13151:19;13250:9;13261:6;13277:4;13284:20;13297:6;13284:12;:20::i;:::-;13183:122;;;;;;;;;;;;;-1:-1:-1;;;;;13183:122:4;-1:-1:-1;;;;;13183:122:4;;;;;;;;;;;;;-1:-1:-1;;;;;13183:122:4;-1:-1:-1;;;;;13183:122:4;;;;;;;;;;;;;;;;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;13183:122:4;;;13173:133;;;;;;13151:155;;13316:24;13343:31;13353:11;13366:1;13369;13372;13343:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;13343:31:4;;-1:-1:-1;;13343:31:4;;-1:-1:-1;;;;;13392:26:4;;;;;;;-1:-1:-1;;;;;;;12403:1022:4;;;;;;:::o;10007:324::-;10110:7;;;10164:135;10188:7;:14;10184:1;:18;10164:135;;;10235:53;10249:38;10261:7;10269:1;10261:10;;;;;;;;;;;;;;10273:13;10249:11;:38::i;:::-;10235:9;;:53;:13;:53;:::i;:::-;10223:65;-1:-1:-1;10204:3:4;;10164:135;;;-1:-1:-1;10315:9:4;10007:324;-1:-1:-1;;;10007:324:4:o;4071:238::-;-1:-1:-1;;;;;4175:18:4;;4130:7;4175:18;;;:10;:18;;;;;4130:7;4211:11;;;;:32;;;;;;;;;;4203:60;;;;;-1:-1:-1;;;4203:60:4;;;;;;;;;;;;-1:-1:-1;;;4203:60:4;;;;;;;;;;;;;;;4280:22;;;;4071:238;-1:-1:-1;;4071:238:4:o;8044:530::-;8147:5;;:30;;;-1:-1:-1;;;8147:30:4;;8171:4;8147:30;;;;;;8129:15;;-1:-1:-1;;;;;8147:5:4;;:15;;:30;;;;;;;;;;;;;;:5;:30;;;2:2:-1;;;;27:1;24;17:12;2:2;8147:30:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8147:30:4;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;8147:30:4;8195:5;;:53;;;-1:-1:-1;;;8195:53:4;;8214:10;8195:53;;;;8234:4;8195:53;;;;;;;;;;;;8147:30;;-1:-1:-1;;;;;;8195:5:4;;;;:18;;:53;;;;;8147:30;;8195:53;;;;;;;;:5;;:53;;;2:2:-1;;;;27:1;24;17:12;2:2;8195:53:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8195:53:4;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;8195:53:4;8187:80;;;;;-1:-1:-1;;;8187:80:4;;;;;;;;;;;;-1:-1:-1;;;8187:80:4;;;;;;;;;;;;;;;8294:5;;:30;;;-1:-1:-1;;;8294:30:4;;8318:4;8294:30;;;;;;8277:14;;-1:-1:-1;;;;;8294:5:4;;:15;;:30;;;;;;;;;;;;;;:5;:30;;;2:2:-1;;;;27:1;24;17:12;2:2;8294:30:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8294:30:4;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;8294:30:4;;-1:-1:-1;8371:6:4;8342:25;8294:30;8356:10;8342:25;:13;:25;:::i;:::-;:35;;8334:62;;;;;-1:-1:-1;;;8334:62:4;;;;;;;;;;;;-1:-1:-1;;;8334:62:4;;;;;;;;;;;;;;;8407:35;8424:9;8435:6;8407:16;:35::i;:::-;8468:13;;:25;;8486:6;8468:25;:17;:25;:::i;:::-;8452:13;:41;8508:59;;;;;;;;-1:-1:-1;;;;;8508:59:4;;;8536:10;;8508:59;;;;;;;;;8044:530;;;;:::o;1480:31::-;;;-1:-1:-1;;;;;1480:31:4;;:::o;1846:54::-;;;;;;;;;;;;;;;:::o;3175:289::-;3216:17;;:::i;:::-;3245:212;;;;;;;;3266:13;;3245:212;;;;3293:22;;3245:212;;;;3329:17;;3245:212;;;;3360:19;;3245:212;;;;3393:22;;3245:212;;;;3429:18;;3245:212;;;;;3175:289;:::o;6154:833::-;1984:19;1969:10;1954:26;;;;:14;:26;;;;;;;;:49;;;;;;;;;1946:85;;;;;-1:-1:-1;;;1946:85:4;;;;;;;;;;;;-1:-1:-1;;;1946:85:4;;;;;;;;;;;;;;;-1:-1:-1;;;;;6258:18:4;::::1;6232:23;6258:18:::0;;;:10:::1;:18;::::0;;;;6309:19:::1;6294:11:::0;;::::1;;:34;::::0;::::1;;;;;;;;6286:66;;;::::0;;-1:-1:-1;;;6286:66:4;;::::1;;::::0;::::1;::::0;::::1;::::0;;;;-1:-1:-1;;;6286:66:4;;;;;;;;;;;;;::::1;;6380:21;6365:11:::0;;::::1;;:36;::::0;::::1;;;;;;;6362:113;;;6438:19;::::0;:26:::1;::::0;6462:1:::1;6438:26;:23;:26;:::i;:::-;6416:19;:48:::0;6362:113:::1;6484:12;::::0;6499:11;;::::1;;:32;::::0;::::1;;;;;;;:53;;;;-1:-1:-1::0;6535:12:4::1;::::0;:17;::::1;6499:53;:94;;;;;6581:12;;6556:21;:37;;6499:94;6603:33:::0;;-1:-1:-1;;6603:33:4::1;6617:19;6603:33:::0;;::::1;::::0;;6663:22:::1;::::0;6646:14:::1;::::0;::::1;:39:::0;6715:17:::1;::::0;6484:109;;-1:-1:-1;6715:24:4::1;::::0;:17;:21:::1;:24::i;:::-;6695:17;:44:::0;6754:20:::1;::::0;-1:-1:-1;;;;;6754:20:4;::::1;::::0;::::1;::::0;;;::::1;6854:7;6850:131;;;6893:12;::::0;6881:25:::1;::::0;-1:-1:-1;;;;;6881:11:4;::::1;::::0;:25;::::1;;;::::0;::::1;::::0;;;6893:12;6881:11;:25;::::1;;;;;;6877:94;;;6943:12;::::0;6926:30:::1;::::0;;;;;;::::1;::::0;;;;::::1;::::0;;::::1;6877:94;2041:1;;6154:833:::0;:::o;1446:28::-;;;-1:-1:-1;;;;;1446:28:4;;:::o;14296:383::-;14471:14;14509:46;14526:10;14538:2;14542:1;14545:9;14509:16;:46::i;:::-;14501:77;;;;;-1:-1:-1;;;14501:77:4;;;;;;;;;;;;-1:-1:-1;;;14501:77:4;;;;;;;;;;;;;;;14595;14605:10;14617:2;14621:35;14645:10;14621:23;:35::i;:::-;14658:13;14595:9;:77::i;:::-;14588:84;14296:383;-1:-1:-1;;;;;14296:383:4:o;262:27:12:-;;;-1:-1:-1;;;;;262:27:12;;:::o;3470:165:4:-;739:5:12;;-1:-1:-1;;;;;739:5:12;725:10;:19;717:41;;;;;-1:-1:-1;;;717:41:12;;;;;;;;;;;;-1:-1:-1;;;717:41:12;;;;;;;;;;;;;;;3542:12:4::1;;3535:3;:19;3532:31;;;3556:7;;3532:31;3572:12;:18:::0;;;3605:23:::1;::::0;;;;;;;::::1;::::0;;;;::::1;::::0;;::::1;768:1:12;3470:165:4::0;:::o;10533:268::-;10632:7;10663:10;-1:-1:-1;;;;;10663:20:4;;;;:43;;-1:-1:-1;10701:5:4;;-1:-1:-1;;;;;10701:5:4;10687:10;:19;10663:43;10655:74;;;;;-1:-1:-1;;;10655:74:4;;;;;;;;;;;;-1:-1:-1;;;10655:74:4;;;;;;;;;;;;;;;10746:48;10756:6;10764;10772;10780:13;10746:9;:48::i;929:102:12:-;739:5;;-1:-1:-1;;;;;739:5:12;725:10;:19;717:41;;;;;-1:-1:-1;;;717:41:12;;;;;;;;;;;;-1:-1:-1;;;717:41:12;;;;;;;;;;;;;;;1001:12:::1;:23:::0;;-1:-1:-1;;;;;;1001:23:12::1;-1:-1:-1::0;;;;;1001:23:12;;;::::1;::::0;;;::::1;::::0;;929:102::o;1420:20:4:-;;;-1:-1:-1;;;;;1420:20:4;;:::o;1321:134:17:-;1379:7;1405:43;1409:1;1412;1405:43;;;;;;;;;;;;;;;;;:3;:43::i;16338:830:4:-;16450:7;16477:11;16473:25;;-1:-1:-1;16497:1:4;16490:8;;16473:25;16526:29;16550:4;16526:23;:29::i;:::-;16516:6;:39;;16508:77;;;;;-1:-1:-1;;;16508:77:4;;;;;;;;;;;;-1:-1:-1;;;16508:77:4;;;;;;;;;;;;;;;-1:-1:-1;;;;;16621:16:4;;16595:23;16621:16;;;:10;:16;;;;;16672:22;;;;:34;;16699:6;16672:34;:26;:34;:::i;:::-;16647:22;;;:59;16741:22;;:34;;16768:6;16741:34;:26;:34;:::i;:::-;16716:22;:59;16785:307;;;;16841:5;;16884:13;;-1:-1:-1;;;;;16841:5:4;;;;:21;;16884:13;16919:6;16947:11;16955:2;16947:7;:11::i;:::-;16841:135;;;;;;;;;;;;;-1:-1:-1;;;;;16841:135:4;-1:-1:-1;;;;;16841:135:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;16841:135:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5:9:-1;2:2;;;27:1;24;17:12;2:2;16841:135:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16841:135:4;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;16841:135:4;16816:208;;;;;-1:-1:-1;;;16816:208:4;;;;;;;;;;;;-1:-1:-1;;;16816:208:4;;;;;;;;;;;;;;;16785:307;;;17047:5;;:26;;;-1:-1:-1;;;17047:26:4;;-1:-1:-1;;;;;17047:26:4;;;;;;;;;;;;;;;:5;;;;;:14;;:26;;;;;;;;;;;;;;:5;;:26;;;2:2:-1;;;;27:1;24;17:12;2:2;17047:26:4;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17047:26:4;;;;;;;15:2:-1;10:3;7:11;4:2;;;31:1;28;21:12;4:2;-1:-1;17047:26:4;17039:53;;;;;-1:-1:-1;;;17039:53:4;;;;;;;;;;;;-1:-1:-1;;;17039:53:4;;;;;;;;;;;;;;;17107:31;;;;;;;;-1:-1:-1;;;;;17107:31:4;;;;;;;;;;;;;-1:-1:-1;17155:6:4;;16338:830;-1:-1:-1;;;;16338:830:4:o;3101:130:17:-;3159:7;3185:39;3189:1;3192;3185:39;;;;;;;;;;;;;;;;;:3;:39::i;874:176::-;932:7;963:5;;;986:6;;;;978:46;;;;;-1:-1:-1;;;978:46:17;;;;;;;;;;;;;;;;;;;;;;;;;;;9578:423:4;-1:-1:-1;;;;;9678:18:4;;9652:23;9678:18;;;:10;:18;;;;;9736:27;;;;:39;;9768:6;9736:39;:31;:39;:::i;:::-;9706:27;;;:69;9854:17;9839:11;;;;:32;;;;;;;;;9835:160;;;9887:35;;-1:-1:-1;;9887:35:4;9901:21;9887:35;;;9958:19;;:26;;9887:35;9958:23;:26::i;:::-;9936:19;:48;9578:423;;;:::o;1746:187:17:-;1832:7;1867:12;1859:6;;;;1851:29;;;;-1:-1:-1;;;1851:29:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1851:29:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1902:5:17;;;1746:187::o;3713:272::-;3799:7;3833:12;3826:5;3818:28;;;;-1:-1:-1;;;3818:28:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27:10:-1;;8:100;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;3818:28:17;;3856:9;3872:1;3868;:5;;;;;;;3713:272;-1:-1:-1;;;;;3713:272:17:o;271:16899:4:-;;;;;;;;;;;29:2:-1;21:6;17:15;125:4;109:14;101:6;88:42;-1:-1;271:16899:4;;;-1:-1:-1;;271:16899:4:o",
  "source": "pragma solidity 0.6.6;\n\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\nimport \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\nimport \"./IERC677.sol\";\nimport \"./Ownable.sol\"; // TODO: switch to \"openzeppelin-solidity/contracts/access/Ownable.sol\";\n\ncontract DataUnionSidechain is Ownable {\n    using SafeMath for uint256;\n\n    //used to describe members and join part agents\n    enum ActiveStatus {None, Active, Inactive}\n\n    //emitted by joins/parts\n    event MemberJoined(address indexed member);\n    event MemberParted(address indexed member);\n    event JoinPartAgentAdded(address indexed agent);\n    event JoinPartAgentRemoved(address indexed agent);\n\n    //emitted when revenue received\n    event RevenueReceived(uint256 amount);\n    event NewEarnings(uint256 earningsPerMember, uint256 activeMemberCount);\n\n    //emitted by withdrawal\n    event EarningsWithdrawn(address indexed member, uint256 amount);\n\n    //in-contract transfers\n    event TransferWithinContract(address indexed from, address indexed to, uint amount);\n    event TransferToAddressInContract(address indexed from, address indexed to, uint amount);\n\n    //new member eth\n    event UpdateNewMemberEth(uint value);\n    event NewMemberEthSent(uint amountWei);\n\n    struct MemberInfo {\n        ActiveStatus status;\n        uint256 earningsBeforeLastJoin;\n        uint256 lmeAtJoin;\n        uint256 withdrawnEarnings;\n    }\n\n    IERC677 public token;\n    address public tokenMediator;\n    address public dataUnionMainnet;\n\n    uint256 public totalEarnings;\n    uint256 public totalEarningsWithdrawn;\n\n    uint256 public activeMemberCount;\n    uint256 public inactiveMemberCount;\n    uint256 public lifetimeMemberEarnings;\n\n    uint256 public joinPartAgentCount;\n\n    uint256 public newMemberEth;\n\n    mapping(address => MemberInfo) public memberData;\n    mapping(address => ActiveStatus) public joinPartAgents;\n\n    modifier onlyJoinPartAgent() {\n        require(joinPartAgents[msg.sender] == ActiveStatus.Active, \"error_onlyJoinPartAgent\");\n        _;\n    }\n\n    // owner will be set by initialize()\n    constructor() public Ownable(address(0)) {}\n\n    receive() external payable {}\n\n    function initialize(\n        address initialOwner,\n        address tokenAddress,\n        address[] memory initialJoinPartAgents,\n        address tokenMediatorAddress,\n        address mainnetDataUnionAddress,\n        uint256 defaultNewMemberEth\n    ) public {\n        require(!isInitialized(), \"error_alreadyInitialized\");\n        owner = msg.sender; // set real owner at the end. During initialize, addJoinPartAgents can be called by owner only\n        token = IERC677(tokenAddress);\n        addJoinPartAgents(initialJoinPartAgents);\n        tokenMediator = tokenMediatorAddress;\n        dataUnionMainnet = mainnetDataUnionAddress;\n        setNewMemberEth(defaultNewMemberEth);\n        owner = initialOwner;\n    }\n\n    function isInitialized() public view returns (bool){\n        return address(token) != address(0);\n    }\n\n    /**\n     * Atomic getter to get all state variables in one call\n     * This alleviates the fact that JSON RPC batch requests aren't available in ethers.js\n     */\n    function getStats() public view returns (uint256[6] memory) {\n        return [\n            totalEarnings,\n            totalEarningsWithdrawn,\n            activeMemberCount,\n            inactiveMemberCount,\n            lifetimeMemberEarnings,\n            joinPartAgentCount\n        ];\n    }\n\n    function setNewMemberEth(uint val) public onlyOwner {\n        if(val == newMemberEth) return;\n        newMemberEth = val;\n        emit UpdateNewMemberEth(val);\n    }\n\n    function getEarnings(address member) public view returns (uint256) {\n        MemberInfo storage info = memberData[member];\n        require(info.status != ActiveStatus.None, \"error_notMember\");\n        return\n            info.earningsBeforeLastJoin +\n            (\n                info.status == ActiveStatus.Active\n                    ? lifetimeMemberEarnings.sub(info.lmeAtJoin)\n                    : 0\n            );\n    }\n\n    function getWithdrawn(address member) public view returns (uint256) {\n        MemberInfo storage info = memberData[member];\n        require(info.status != ActiveStatus.None, \"error_notMember\");\n        return info.withdrawnEarnings;\n    }\n\n    function getWithdrawableEarnings(address member) public view returns (uint256) {\n        return getEarnings(member).sub(getWithdrawn(member));\n    }\n\n    function totalWithdrawable() public view returns (uint256) {\n        return totalEarnings.sub(totalEarningsWithdrawn);\n    }\n\n    function addJoinPartAgents(address[] memory agents) public onlyOwner {\n        for (uint256 i = 0; i < agents.length; i++) {\n            addJoinPartAgent(agents[i]);\n        }\n    }\n\n    function addJoinPartAgent(address agent) public onlyOwner {\n        require(joinPartAgents[agent] != ActiveStatus.Active, \"error_alreadyActiveAgent\");\n        joinPartAgents[agent] = ActiveStatus.Active;\n        emit JoinPartAgentAdded(agent);\n        joinPartAgentCount = joinPartAgentCount.add(1);\n    }\n\n    function removeJoinPartAgent(address agent) public onlyOwner {\n        require(joinPartAgents[agent] == ActiveStatus.Active, \"error_notActiveAgent\");\n        joinPartAgents[agent] = ActiveStatus.Inactive;\n        emit JoinPartAgentRemoved(agent);\n        joinPartAgentCount = joinPartAgentCount.sub(1);\n    }\n\n    /**\n     * Process unaccounted tokens that have been sent previously\n     * Called by AMB (see DataUnionMainnet:sendTokensToBridge)\n     */\n    function refreshRevenue() public returns (uint256) {\n        uint256 balance = token.balanceOf(address(this));\n        uint256 revenue = balance.sub(totalWithdrawable()); // a.sub(b) errors if b > a\n        if (revenue == 0 || activeMemberCount == 0) return 0;\n        uint256 earningsPerMember = revenue.div(activeMemberCount);\n        lifetimeMemberEarnings = lifetimeMemberEarnings.add(earningsPerMember);\n        totalEarnings = totalEarnings.add(revenue);\n        emit RevenueReceived(revenue);\n        emit NewEarnings(earningsPerMember, activeMemberCount);\n        return revenue;\n    }\n\n    function addMember(address payable member) public onlyJoinPartAgent {\n        MemberInfo storage info = memberData[member];\n        require(info.status != ActiveStatus.Active, \"error_alreadyMember\");\n        if(info.status == ActiveStatus.Inactive){\n            inactiveMemberCount = inactiveMemberCount.sub(1);\n        }\n        bool sendEth = info.status == ActiveStatus.None && newMemberEth != 0 && address(this).balance >= newMemberEth;\n        info.status = ActiveStatus.Active;\n        info.lmeAtJoin = lifetimeMemberEarnings;\n        activeMemberCount = activeMemberCount.add(1);\n        emit MemberJoined(member);\n\n        // give new members ETH. continue even if transfer fails\n        if (sendEth) {\n            if (member.send(newMemberEth)) {\n                NewMemberEthSent(newMemberEth);\n            }\n        }\n    }\n\n    function partMember(address member) public {\n        require(msg.sender == member || joinPartAgents[msg.sender] == ActiveStatus.Active, \"error_notPermitted\");\n        MemberInfo storage info = memberData[member];\n        require(info.status == ActiveStatus.Active, \"error_notActiveMember\");\n        info.earningsBeforeLastJoin = getEarnings(member);\n        info.status = ActiveStatus.Inactive;\n        activeMemberCount = activeMemberCount.sub(1);\n        inactiveMemberCount = inactiveMemberCount.add(1);\n        emit MemberParted(member);\n    }\n\n    function addMembers(address payable[] memory members) public onlyJoinPartAgent {\n        for (uint256 i = 0; i < members.length; i++) {\n            addMember(members[i]);\n        }\n    }\n\n    //access checked in partMember\n    function partMembers(address[] memory members) public {\n        for (uint256 i = 0; i < members.length; i++) {\n            partMember(members[i]);\n        }\n    }\n\n    /**\n     * Transfer tokens from outside contract, add to a recipient's in-contract balance\n     */\n    function transferToMemberInContract(address recipient, uint amount) public {\n        uint bal_before = token.balanceOf(address(this));\n        require(token.transferFrom(msg.sender, address(this), amount), \"error_transfer\");\n        uint bal_after = token.balanceOf(address(this));\n        require(bal_after.sub(bal_before) >= amount, \"error_transfer\");\n\n        _increaseBalance(recipient, amount);\n        totalEarnings = totalEarnings.add(amount);\n        emit TransferToAddressInContract(msg.sender, recipient,  amount);\n    }\n\n    /**\n     * Transfer tokens from sender's in-contract balance to recipient's in-contract balance\n     * This is done by \"withdrawing\" sender's earnings and crediting them to recipient's unwithdrawn earnings,\n     *   so withdrawnEarnings never decreases for anyone (within this function)\n     * @param recipient whose withdrawable earnings will increase\n     * @param amount how much withdrawable earnings is transferred\n     */\n    function transferWithinContract(address recipient, uint amount) public {\n        require(getWithdrawableEarnings(msg.sender) >= amount, \"error_insufficientBalance\");    // reverts with \"error_notMember\" msg.sender not member\n        MemberInfo storage info = memberData[msg.sender];\n        info.withdrawnEarnings = info.withdrawnEarnings.add(amount);\n        _increaseBalance(recipient, amount);\n        emit TransferWithinContract(msg.sender, recipient, amount);\n    }\n\n    /**\n     * Hack to add to single member's balance without affecting lmeAtJoin\n     */\n    function _increaseBalance(address member, uint amount) internal {\n        MemberInfo storage info = memberData[member];\n        info.earningsBeforeLastJoin = info.earningsBeforeLastJoin.add(amount);\n\n        // allow seeing and withdrawing earnings\n        if (info.status == ActiveStatus.None) {\n            info.status = ActiveStatus.Inactive;\n            inactiveMemberCount = inactiveMemberCount.add(1);\n        }\n    }\n\n    function withdrawMembers(address[] memory members, bool sendToMainnet)\n        public\n        returns (uint256)\n    {\n        uint256 withdrawn = 0;\n        for (uint256 i = 0; i < members.length; i++) {\n            withdrawn = withdrawn.add(withdrawAll(members[i], sendToMainnet));\n        }\n        return withdrawn;\n    }\n\n    function withdrawAll(address member, bool sendToMainnet)\n        public\n        returns (uint256)\n    {\n        return withdraw(member, getWithdrawableEarnings(member), sendToMainnet);\n    }\n\n    function withdraw(address member, uint amount, bool sendToMainnet)\n        public\n        returns (uint256)\n    {\n        require(msg.sender == member || msg.sender == owner, \"error_notPermitted\");\n        return _withdraw(member, member, amount, sendToMainnet);\n    }\n\n    function withdrawAllTo(address to, bool sendToMainnet)\n        public\n        returns (uint256)\n    {\n        return withdrawTo(to, getWithdrawableEarnings(msg.sender), sendToMainnet);\n    }\n\n    function withdrawTo(address to, uint amount, bool sendToMainnet)\n        public\n        returns (uint256)\n    {\n        return _withdraw(msg.sender, to, amount, sendToMainnet);\n    }\n\n    /**\n     * Check signature from a member authorizing withdrawing its earnings to another account.\n     * Throws if the signature is badly formatted or doesn't match the given signer and amount.\n     * Signature has parts the act as replay protection:\n     * 1) `address(this)`: signature can't be used for other contracts;\n     * 2) `withdrawn[signer]`: signature only works once (for unspecified amount), and can be \"cancelled\" by sending a withdraw tx.\n     * Generated in Javascript with: `web3.eth.accounts.sign(recipientAddress + amount.toString(16, 64) + contractAddress.slice(2) + withdrawnTokens.toString(16, 64), signerPrivateKey)`,\n     * or for unlimited amount: `web3.eth.accounts.sign(recipientAddress + \"0\".repeat(64) + contractAddress.slice(2) + withdrawnTokens.toString(16, 64), signerPrivateKey)`.\n     * @param signer whose earnings are being withdrawn\n     * @param recipient of the tokens\n     * @param amount how much is authorized for withdraw, or zero for unlimited (withdrawAll)\n     * @param signature byte array from `web3.eth.accounts.sign`\n     * @return isValid true iff signer of the authorization (member whose earnings are going to be withdrawn) matches the signature\n     */\n    function signatureIsValid(\n        address signer,\n        address recipient,\n        uint amount,\n        bytes memory signature\n    )\n        public view\n        returns (bool isValid)\n    {\n        require(signature.length == 65, \"error_badSignatureLength\");\n\n        bytes32 r; bytes32 s; uint8 v;\n        assembly {      // solium-disable-line security/no-inline-assembly\n            r := mload(add(signature, 32))\n            s := mload(add(signature, 64))\n            v := byte(0, mload(add(signature, 96)))\n        }\n        if (v < 27) {\n            v += 27;\n        }\n        require(v == 27 || v == 28, \"error_badSignatureVersion\");\n\n        // When changing the message, remember to double-check that message length is correct!\n        bytes32 messageHash = keccak256(abi.encodePacked(\n            \"\\x19Ethereum Signed Message:\\n104\", recipient, amount, address(this), getWithdrawn(signer)));\n        address calculatedSigner = ecrecover(messageHash, v, r, s);\n\n        return calculatedSigner == signer;\n    }\n\n    /**\n     * Do an \"unlimited donate withdraw\" on behalf of someone else, to an address they've specified.\n     * Sponsored withdraw is paid by admin, but target account could be whatever the member specifies.\n     * The signature gives a \"blank cheque\" for admin to withdraw all tokens to `recipient` in the future,\n     *   and it's valid until next withdraw (and so can be nullified by withdrawing any amount).\n     * A new signature needs to be obtained for each subsequent future withdraw.\n     * @param fromSigner whose earnings are being withdrawn\n     * @param to the address the tokens will be sent to (instead of `msg.sender`)\n     * @param sendToMainnet if the tokens should be sent to mainnet or only withdrawn into sidechain address\n     * @param signature from the member, see `signatureIsValid` how signature generated for unlimited amount\n     */\n    function withdrawAllToSigned(\n        address fromSigner,\n        address to,\n        bool sendToMainnet,\n        bytes memory signature\n    )\n        public\n        returns (uint withdrawn)\n    {\n        require(signatureIsValid(fromSigner, to, 0, signature), \"error_badSignature\");\n        return _withdraw(fromSigner, to, getWithdrawableEarnings(fromSigner), sendToMainnet);\n    }\n\n    /**\n     * Do a \"donate withdraw\" on behalf of someone else, to an address they've specified.\n     * Sponsored withdraw is paid by admin, but target account could be whatever the member specifies.\n     * The signature is valid only for given amount of tokens that may be different from maximum withdrawable tokens.\n     * @param fromSigner whose earnings are being withdrawn\n     * @param to the address the tokens will be sent to (instead of `msg.sender`)\n     * @param amount of tokens to withdraw\n     * @param sendToMainnet if the tokens should be sent to mainnet or only withdrawn into sidechain address\n     * @param signature from the member, see `signatureIsValid` how signature generated for unlimited amount\n     */\n    function withdrawToSigned(\n        address fromSigner,\n        address to,\n        uint amount,\n        bool sendToMainnet,\n        bytes memory signature\n    )\n        public\n        returns (uint withdrawn)\n    {\n        require(signatureIsValid(fromSigner, to, amount, signature), \"error_badSignature\");\n        return _withdraw(fromSigner, to, amount, sendToMainnet);\n    }\n\n    function toBytes(address a) public pure returns (bytes memory b) {\n        assembly {\n            let m := mload(0x40)\n            a := and(a, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n            mstore(\n                add(m, 20),\n                xor(0x140000000000000000000000000000000000000000, a)\n            )\n            mstore(0x40, add(m, 52))\n            b := m\n        }\n    }\n\n    /**\n     * Internal function common to all withdraw methods.\n     * Does NOT check proper access, so all callers must do that first.\n     */\n    function _withdraw(address from, address to, uint amount, bool sendToMainnet)\n        internal\n        returns (uint256)\n    {\n        if (amount == 0) return 0;\n        require(amount <= getWithdrawableEarnings(from), \"error_insufficientBalance\");\n        MemberInfo storage info = memberData[from];\n        info.withdrawnEarnings = info.withdrawnEarnings.add(amount);\n        totalEarningsWithdrawn = totalEarningsWithdrawn.add(amount);\n        if (sendToMainnet)\n            require(\n                token.transferAndCall(\n                    tokenMediator,\n                    amount,\n                    toBytes(to)\n                ),\n                \"error_transfer\"\n            );\n        else require(token.transfer(to, amount), \"error_transfer\");\n        emit EarningsWithdrawn(from, amount);\n        return amount;\n    }\n}\n",
  "sourcePath": "/home/heynow/streamr/data-union-solidity/contracts/DataUnionSidechain.sol",
  "compiler": {
    "name": "solc",
    "version": "0.6.6+commit.6c089d02.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.3",
  "updatedAt": "2020-12-07T14:56:26.133Z",
  "devdoc": {
    "methods": {
      "claimOwnership()": {
        "details": "Allows the pendingOwner address to finalize the transfer."
      },
      "signatureIsValid(address,address,uint256,bytes)": {
        "params": {
          "amount": "how much is authorized for withdraw, or zero for unlimited (withdrawAll)",
          "recipient": "of the tokens",
          "signature": "byte array from `web3.eth.accounts.sign`",
          "signer": "whose earnings are being withdrawn"
        },
        "returns": {
          "isValid": "true iff signer of the authorization (member whose earnings are going to be withdrawn) matches the signature"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to set the pendingOwner address.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      },
      "transferWithinContract(address,uint256)": {
        "params": {
          "amount": "how much withdrawable earnings is transferred",
          "recipient": "whose withdrawable earnings will increase"
        }
      },
      "withdrawAllToSigned(address,address,bool,bytes)": {
        "params": {
          "fromSigner": "whose earnings are being withdrawn",
          "sendToMainnet": "if the tokens should be sent to mainnet or only withdrawn into sidechain address",
          "signature": "from the member, see `signatureIsValid` how signature generated for unlimited amount",
          "to": "the address the tokens will be sent to (instead of `msg.sender`)"
        }
      },
      "withdrawToSigned(address,address,uint256,bool,bytes)": {
        "params": {
          "amount": "of tokens to withdraw",
          "fromSigner": "whose earnings are being withdrawn",
          "sendToMainnet": "if the tokens should be sent to mainnet or only withdrawn into sidechain address",
          "signature": "from the member, see `signatureIsValid` how signature generated for unlimited amount",
          "to": "the address the tokens will be sent to (instead of `msg.sender`)"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "getStats()": {
        "notice": "Atomic getter to get all state variables in one call This alleviates the fact that JSON RPC batch requests aren't available in ethers.js"
      },
      "refreshRevenue()": {
        "notice": "Process unaccounted tokens that have been sent previously Called by AMB (see DataUnionMainnet:sendTokensToBridge)"
      },
      "signatureIsValid(address,address,uint256,bytes)": {
        "notice": "Check signature from a member authorizing withdrawing its earnings to another account. Throws if the signature is badly formatted or doesn't match the given signer and amount. Signature has parts the act as replay protection: 1) `address(this)`: signature can't be used for other contracts; 2) `withdrawn[signer]`: signature only works once (for unspecified amount), and can be \"cancelled\" by sending a withdraw tx. Generated in Javascript with: `web3.eth.accounts.sign(recipientAddress + amount.toString(16, 64) + contractAddress.slice(2) + withdrawnTokens.toString(16, 64), signerPrivateKey)`, or for unlimited amount: `web3.eth.accounts.sign(recipientAddress + \"0\".repeat(64) + contractAddress.slice(2) + withdrawnTokens.toString(16, 64), signerPrivateKey)`."
      },
      "transferToMemberInContract(address,uint256)": {
        "notice": "Transfer tokens from outside contract, add to a recipient's in-contract balance"
      },
      "transferWithinContract(address,uint256)": {
        "notice": "Transfer tokens from sender's in-contract balance to recipient's in-contract balance This is done by \"withdrawing\" sender's earnings and crediting them to recipient's unwithdrawn earnings,  so withdrawnEarnings never decreases for anyone (within this function)"
      },
      "withdrawAllToSigned(address,address,bool,bytes)": {
        "notice": "Do an \"unlimited donate withdraw\" on behalf of someone else, to an address they've specified. Sponsored withdraw is paid by admin, but target account could be whatever the member specifies. The signature gives a \"blank cheque\" for admin to withdraw all tokens to `recipient` in the future,  and it's valid until next withdraw (and so can be nullified by withdrawing any amount). A new signature needs to be obtained for each subsequent future withdraw."
      },
      "withdrawToSigned(address,address,uint256,bool,bytes)": {
        "notice": "Do a \"donate withdraw\" on behalf of someone else, to an address they've specified. Sponsored withdraw is paid by admin, but target account could be whatever the member specifies. The signature is valid only for given amount of tokens that may be different from maximum withdrawable tokens."
      }
    }
  }
}
